Данный код будет выводить 
"Bad: undefined" 4 раза.

Причина:
- сначала выполняется итерация цикла for, затем в цикл событий (event loop) браузера как бы откладывается в очередь наш settimeout. Он откладывается так как переменная i объявлена с помощью var, который делает переменную i глобальной, то есть только когда переменная i пройдет цикл, с очереди вызывается settimeout, но у него нет уже в его области видимости переменной i поэтому он обращается в глобальную область видимости и оттуда берет значение i, но так как цикл уже прошел и i хранит значение 4, settimeout использует это значение, соответсвенно тернарный оператор выдает «ложный» вариант: Bad: undefined. Undefined уже потому что в массиве отсутствует значение с индексом 4.

1) Первое решение это изменить область видимости для settimeout через объявление переменной i с помощью let. Которая дает возможность создавать свою локальную область видимости (block scope). То есть с каждой итерацией будет создаваться новая область видимости для settimeouta в которой будет доступна копия локальной i, и в этом случае цикл сработает как ожидается

for (let i = 0; i < arr.length; i++) {
  setTimeout(function () {
    console.log(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`);
  }, 3000);
}

2) Второе решение это передать текущее значение глобальной переменной i как аргумент в функцию settimeout которая возвратит ожидаемые значения массива, так как создается замыкание и для settimeouta становятся доступны копии текущей переменной i

for (var i = 0; i < arr.length; i++) {
  console.log(i);
  setTimeout(
    (function (current) {
      return function () {
        console.log(
          arr[current] > 13 ? `Good: ${arr[current]}` : `Bad: ${arr[current]}`
        );
      };
    })(i),
    3000
  );
}
